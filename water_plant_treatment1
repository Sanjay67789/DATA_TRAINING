import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import plotly.express as px
import plotly.subplots as sp

# Load your dataset
file_path = r'D:\WATER_PLANT_DATA_SET\W_P_T_DATASET.csv'
df = pd.read_csv(file_path).head(10000)

# Target columns to predict
target_columns = ['ph', 'conductivity', 'turbidity']
irrelevant_columns = ['_id', 'idAcueducto', 'idPlanta', 'idEstacion', 'fechaGeneracion']

# Features: all columns except target parameters and irrelevant ones
X = df.drop(columns=[col for col in irrelevant_columns + target_columns if col in df.columns])
X.fillna(X.mean(), inplace=True)

# Store actual and predicted values for plotting
predictions = pd.DataFrame()

# Loop through each target variable to train and predict
for target in target_columns:
    if target not in df.columns:
        print(f"Column '{target}' not found in the dataset.")
        continue
    
    # Target variable
    y = df[target]
    
    # Handle missing values in the target
    if y.isna().sum() > 0:
        print(f"Warning: NaN values found in the target '{target}'. Filling with mean.")
        y.fillna(y.mean(), inplace=True)
    
    # Train/test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Initialize and train a Random Forest model
    model = RandomForestRegressor()
    model.fit(X_train, y_train)
    
    # Predictions
    y_pred = model.predict(X_test)
    
    # Store actual and predicted values
    predictions[f'Actual_{target}'] = y_test
    predictions[f'Predicted_{target}'] = y_pred

# Plotting Actual vs Predicted for all targets
fig = px.scatter_matrix(predictions, dimensions=predictions.columns,
                        title="Actual vs Predicted for Multiple Parameters")

# Customize layout for better alignment
fig.update_layout(
    height=1000,  # Increase height for more space
    width=1200,   # Increase width for more space
    margin=dict(l=50, r=50, b=50, t=100),  # Margins to avoid plot overlap
    font=dict(size=10),
)

# Show the updated plot
fig.show()
